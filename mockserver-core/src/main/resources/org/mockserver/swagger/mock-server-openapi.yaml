openapi: 3.0.0-rc2
servers:
  - url: 'http://localhost:1080/'
  - url: 'https://localhost:1080/'
info:
  title: Mock Server API
  version: '10.8'
  description: >-
    MockServer enables easy mocking of any system you integrate with via HTTP or
    HTTPS with clients written in Java, JavaScript and Ruby.  MockServer also
    includes a proxy that introspects all proxied traffic including encrypted
    SSL traffic and supports Port Forwarding, Web Proxying (i.e. HTTP proxy),
    HTTPS Tunneling Proxying (using HTTP CONNECT) and SOCKS Proxying (i.e.
    dynamic port forwarding).
  license:
    url: 'https://github.com/jamesdbloom/mockserver/blob/master/LICENSE.md'
    name: Apache 2.0
  contact:
    email: mockserver@noreply.github.com
tags:
  - name: expectation
    description: Create expectations
  - name: verify
    description: Verify requests
  - name: control
    description: Manage MockServer process
paths:
  /status:
    put:
      tags:
        - control
      summary: return listening ports
      description: ''
      responses:
        '200':
          description: MockServer is running and listening on the listed ports
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ports'
  /bind:
    put:
      tags:
        - control
      summary: bind additional listening ports
      description: only supported on Netty version
      parameters: []
      responses:
        '202':
          description: >-
            listening on additional requested ports, note: the response ony
            contains ports added for the request, to list all ports use /status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ports'
        '400':
          description: incorrect request format
        '406':
          description: >-
            unable to bind to ports (i.e. already bound or JVM process doesn't
            have permission)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ports'
        description: >-
          list of ports to bind to, where 0 indicates dynamically bind to any
          available port
        required: true
  /stop:
    put:
      tags:
        - control
      summary: stop running process
      description: only supported on Netty version
      responses:
        '202':
          description: MockServer process is stopping
  /expectation:
    put:
      tags:
        - expectation
      summary: create expectation
      parameters: []
      responses:
        '201':
          description: expectation created
        '400':
          description: incorrect request format
        '406':
          description: invalid expectation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Expectations'
        description: expectation to create
        required: true
  /clear:
    put:
      tags:
        - expectation
      summary: clears expectations and recorded requests that match the request matcher
      parameters: []
      responses:
        '202':
          description: expectations and recorded requests cleared
        '400':
          description: incorrect request format
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpRequest'
        description: request used to match expectations and recored requests to clear
  /reset:
    put:
      tags:
        - expectation
      summary: clears all expectations and recorded requests
      responses:
        '202':
          description: expectations and recorded requests cleared
  /dumpToLog:
    put:
      tags:
        - expectation
      summary: write all requests to the request log that match the request matcher
      parameters: []
      responses:
        '202':
          description: recorded requests written to request log
        '400':
          description: incorrect request format
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpRequest'
        description: >-
          request used to match which recored requests to write to the request
          log
  /verify:
    put:
      tags:
        - expectation
      summary: verify a request has been received a specific number of times
      parameters: []
      responses:
        '202':
          description: matching request has been received specified number of times
        '400':
          description: incorrect request format
        '406':
          description: request has not been received specified numbers of times
          content:
            text/plain:
              schema:
                type: string
                description: 'JUnit expected:<...> but was:<...> format'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Verification'
        description: request matcher and the number of times to match
  /verifySequence:
    put:
      tags:
        - expectation
      summary: verify a sequence of request has been received in the specific order
      parameters: []
      responses:
        '202':
          description: request sequence has been received in specified order
        '400':
          description: incorrect request format
        '406':
          description: request sequence has not been received in specified order
          content:
            text/plain:
              schema:
                type: string
                description: 'JUnit expected:<...> but was:<...> format'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerificationSequence'
        description: the sequence of requests matchers
components:
  schemas:
    Expectations:
      title: list of expectations
      type: array
      additionalProperties: false
      items:
        $ref: '#/components/schemas/Expectation'
    Expectation:
      title: expectation
      type: object
      additionalProperties: false
      properties:
        httpRequest:
          $ref: '#/components/schemas/HttpRequest'
        httpResponse:
          $ref: '#/components/schemas/HttpResponse'
        times:
          $ref: '#/components/schemas/Times'
    HttpRequest:
      title: request matcher
      type: object
      additionalProperties: false
      properties:
        body:
          $ref: '#/components/schemas/Body'
        headers:
          $ref: '#/components/schemas/Headers'
        cookies:
          $ref: '#/components/schemas/Cookies'
        queryStringParameters:
          $ref: '#/components/schemas/QueryStringParameters'
        path:
          type: string
        method:
          type: string
    HttpResponse:
      title: response
      type: object
      additionalProperties: false
      properties:
        body:
          type: string
        delay:
          $ref: '#/components/schemas/Delay'
        cookies:
          $ref: '#/components/schemas/Cookies'
        connectionOptions:
          $ref: '#/components/schemas/ConnectionOptions'
        headers:
          $ref: '#/components/schemas/Headers'
        statusCode:
          type: integer
    Times:
      title: number of responses
      type: object
      additionalProperties: false
      properties:
        remainingTimes:
          type: integer
        unlimited:
          type: boolean
    Headers:
      title: headers
      type: array
      additionalProperties: false
      items:
        type: object
        properties:
          values:
            items:
              type: string
            type: array
          name:
            type: string
    Cookies:
      title: cookies
      type: array
      additionalProperties: false
      items:
        type: object
        properties:
          name:
            type: string
          value:
            type: string
    QueryStringParameters:
      title: parameters
      type: array
      additionalProperties: false
      items:
        type: object
        properties:
          values:
            items:
              type: string
            type: array
          name:
            type: string
    Body:
      title: body
      type: object
      additionalProperties: false
      properties:
        type:
          type: string
        value:
          type: string
    Delay:
      title: response delay
      type: object
      additionalProperties: false
      properties:
        timeUnit:
          type: string
        value:
          type: integer
    ConnectionOptions:
      title: connection options
      type: object
      additionalProperties: false
      properties:
        closeSocket:
          type: boolean
        contentLengthHeaderOverride:
          type: integer
        suppressContentLengthHeader:
          type: boolean
        suppressConnectionHeader:
          type: boolean
        keepAliveOverride:
          type: boolean
    Error:
      title: verification
      type: object
      properties:
        delay:
          $ref: '#/components/schemas/Delay'
        dropConnection:
          type: boolean
        responseBytes:
          description: Base64 encoded bytes
          type: string
    Verification:
      title: verification
      type: object
      additionalProperties: false
      properties:
        httpRequest:
          $ref: '#/components/schemas/HttpRequest'
        times:
          $ref: '#/components/schemas/VerificationTimes'
    VerificationTimes:
      title: number of request to verify
      type: object
      additionalProperties: false
      properties:
        count:
          type: integer
        exact:
          type: boolean
    VerificationSequence:
      title: verification sequence
      type: object
      additionalProperties: false
      properties:
        httpRequests:
          type: array
          items:
            $ref: '#/components/schemas/HttpRequest'
    Ports:
      title: list of ports
      type: object
      additionalProperties: false
      properties:
        ports:
          items:
            type: number
          type: array
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  securitySchemes: {}
  headers: {}