---
swagger: "2.0"
info:
  title: "Mock Server API"
  version: "10.8"
  description: "MockServer enables easy mocking of any system you integrate with via HTTP or HTTPS with clients written in Java, JavaScript and Ruby.  MockServer also includes a proxy that introspects all proxied traffic including encrypted SSL traffic and supports Port Forwarding, Web Proxying (i.e. HTTP proxy), HTTPS Tunneling Proxying (using HTTP CONNECT) and SOCKS Proxying (i.e. dynamic port forwarding)."
  license:
    url: "https://github.com/jamesdbloom/mockserver/blob/master/LICENSE.md"
    name: "Apache 2.0"
  contact:
    email: "mockserver@noreply.github.com"
schemes:
- http
- https
tags:
- name: "expectation"
  description: "Create expectations"
- name: "verify"
  description: "Verify requests"
- name: "control"
  description: "Manage MockServer process"
basePath: "/"
host: "localhost:1080"
paths:
  "/status":
    put:
      tags:
      - "control"
      summary: "return listening ports"
      description: ""
      produces:
      - "application/json"
      consumes:
      - "application/json"
      responses:
        200:
          description: "MockServer is running and listening on the listed ports"
          schema:
            $ref: "#/definitions/Ports"
  "/bind":
    put:
      tags:
      - "control"
      summary: "bind additional listening ports"
      description: "only supported on Netty version"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - in: body
        name: ports
        required: true
        description: "list of ports to bind to, where 0 indicates dynamically bind to any available port"
        schema:
          $ref: "#/definitions/Ports"
      responses:
        202:
          description: "listening on additional requested ports, note: the response ony contains ports added for the request, to list all ports use /status"
          schema:
            $ref: "#/definitions/Ports"
        406:
          description: "unable to bind to ports (i.e. already bound or JVM process doesn't have permission)"
        400:
          description: "incorrect request format"
  "/stop":
    put:
      tags:
      - "control"
      summary: "stop running process"
      description: "only supported on Netty version"
      responses:
        202:
          description: "MockServer process is stopping"
  "/expectation":
    put:
      tags:
      - "expectation"
      summary: "create expectation"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - in: body
        name: expectation
        required: true
        description: "expectation to create"
        schema:
          $ref: "#/definitions/Expectations"
      responses:
        201:
          description: "expectation created"
        406:
          description: "invalid expectation"
        400:
          description: "incorrect request format"
  "/clear":
    put:
      tags:
      - "expectation"
      summary: "clears expectations and recorded requests that match the request matcher"
      consumes:
      - "application/json"
      parameters:
      - in: body
        name: request_matcher
        required: false
        description: "request used to match expectations and recored requests to clear"
        schema:
          $ref: "#/definitions/HttpRequest"
      responses:
        202:
          description: "expectations and recorded requests cleared"
        400:
          description: "incorrect request format"
  "/reset":
    put:
      tags:
      - "expectation"
      summary: "clears all expectations and recorded requests"
      responses:
        202:
          description: "expectations and recorded requests cleared"
  "/dumpToLog":
    put:
      tags:
      - "expectation"
      summary: "write all requests to the request log that match the request matcher"
      consumes:
      - "application/json"
      parameters:
      - in: body
        name: request_matcher
        required: false
        description: "request used to match which recored requests to write to the request log"
        schema:
          $ref: "#/definitions/HttpRequest"
      responses:
        202:
          description: "recorded requests written to request log"
        400:
          description: "incorrect request format"
  "/verify":
    put:
      tags:
      - "expectation"
      summary: "verify a request has been received a specific number of times"
      consumes:
      - "application/json"
      produces:
      - "text/plain"
      parameters:
      - in: body
        name: request_matcher
        required: false
        description: "request matcher and the number of times to match"
        schema:
          $ref: "#/definitions/Verification"
      responses:
        202:
          description: "matching request has been received specified number of times"
        406:
          description: "request has not been received specified numbers of times"
          schema:
            type: string
            description: "JUnit expected:<...> but was:<...> format"
        400:
          description: "incorrect request format"
  "/verifySequence":
    put:
      tags:
      - "expectation"
      summary: "verify a sequence of request has been received in the specific order"
      consumes:
      - "application/json"
      produces:
      - "text/plain"
      parameters:
      - in: body
        name: request_matcher
        required: false
        description: "the sequence of requests matchers"
        schema:
          $ref: "#/definitions/VerificationSequence"
      responses:
        202:
          description: "request sequence has been received in specified order"
        406:
          description: "request sequence has not been received in specified order"
          schema:
            type: string
            description: "JUnit expected:<...> but was:<...> format"
        400:
          description: "incorrect request format"
definitions:
  Expectations:
    title: "list of expectations"
    type: array
    additionalProperties: false
    items:
      $ref: "#/definitions/Expectation"
  Expectation:
    title: "expectation"
    type: object
    additionalProperties: false
    properties:
      httpRequest:
        $ref: "#/definitions/HttpRequest"
      httpResponse:
        $ref: "#/definitions/HttpResponse"
      times:
        $ref: "#/definitions/Times"
  HttpRequest:
    title: "request matcher"
    type: object
    additionalProperties: false
    properties:
      body:
        $ref: "#/definitions/Body"
      headers:
        $ref: "#/definitions/Headers"
      cookies:
        $ref: "#/definitions/Cookies"
      queryStringParameters:
        $ref: "#/definitions/QueryStringParameters"
      path:
        type: string
      method:
        type: string
  HttpResponse:
    title: "response"
    type: object
    additionalProperties: false
    properties:
      body:
        type: string
      delay:
        $ref: "#/definitions/Delay"
      cookies:
        $ref: "#/definitions/Cookies"
      connectionOptions:
        $ref: "#/definitions/ConnectionOptions"
      headers:
        $ref: "#/definitions/Headers"
      statusCode:
        type: integer
  Times:
    title: "number of responses"
    type: object
    additionalProperties: false
    properties:
      remainingTimes:
        type: integer
      unlimited:
        type: boolean
  Headers:
    title: "headers"
    type: array
    additionalProperties: false
    items:
      type: object
      properties:
        values:
          items:
            type: string
          type: array
        name:
          type: string
  Cookies:
    title: "cookies"
    type: array
    additionalProperties: false
    items:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
  QueryStringParameters:
    title: "parameters"
    type: array
    additionalProperties: false
    items:
      type: object
      properties:
        values:
          items:
            type: string
          type: array
        name:
          type: string
  Body:
    title: "body"
    type: object
    additionalProperties: false
    properties:
      type:
        type: string
      value:
        type: string
  Delay:
    title: "response delay"
    type: object
    additionalProperties: false
    properties:
      timeUnit:
        type: string
      value:
        type: integer
  ConnectionOptions:
    title: "connection options"
    type: object
    additionalProperties: false
    properties:
      closeSocket:
        type: boolean
      contentLengthHeaderOverride:
        type: integer
      suppressContentLengthHeader:
        type: boolean
      suppressConnectionHeader:
        type: boolean
      keepAliveOverride:
        type: boolean
  Error:
    title: "verification"
    type: object
    properties:
      delay:
        $ref: '#/definitions/Delay'
      dropConnection:
        type: boolean
      responseBytes:
        description: "Base64 encoded bytes"
        type: string
  Verification:
    title: "verification"
    type: object
    additionalProperties: false
    properties:
      httpRequest:
        $ref: "#/definitions/HttpRequest"
      times:
        $ref: "#/definitions/VerificationTimes"
  VerificationTimes:
    title: "number of request to verify"
    type: object
    additionalProperties: false
    properties:
      count:
        type: integer
      exact:
        type: boolean
  VerificationSequence:
    title: "verification sequence"
    type: object
    additionalProperties: false
    properties:
      httpRequests:
        type: array
        items:
          $ref: "#/definitions/HttpRequest"
  Ports:
    title: "list of ports"
    type: object
    additionalProperties: false
    properties:
      ports:
        items:
          type: number
        type: array
