swagger: "2.0"
info:
  title: "Mock Server API"
  version: "10.8"
  description: "MockServer enables easy mocking of any system you integrate with via HTTP or HTTPS with clients written in Java, JavaScript and Ruby.  MockServer also includes a proxy that introspects all proxied traffic including encrypted SSL traffic and supports Port Forwarding, Web Proxying (i.e. HTTP proxy), HTTPS Tunneling Proxying (using HTTP CONNECT) and SOCKS Proxying (i.e. dynamic port forwarding)."
  license:
    url: 'https://github.com/jamesdbloom/mockserver/blob/master/LICENSE.md'
    name: "Apache 2.0"
  contact:
    email: "mockserver@noreply.github.com"
schemes:
  - http
  - https
tags:
  - name: expectation
    description: "Create expectations"
  - name: verify
    description: "Verify requests"
  - name: control
    description: "Manage MockServer process"
basePath: /
host: 'localhost:1080'
paths:
  /status:
    put:
      tags:
        - control
      summary: "return listening ports"
      produces:
        - application/json
      consumes:
        - application/json
      responses:
        '200':
          description: "MockServer is running and listening on the listed ports"
          schema:
            $ref: "https://raw.githubusercontent.com/jamesdbloom/mockserver/master/mockserver-core/src/main/resources/org/mockserver/model/schema/ports.json"
  /bind:
    put:
      tags:
        - control
      summary: "bind additional listening ports"
      description: "only supported on Netty version"
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: ports
          required: true
          description: "list of ports to bind to, where 0 indicates dynamically bind to any available port"
          schema:
            $ref: "https://raw.githubusercontent.com/jamesdbloom/mockserver/master/mockserver-core/src/main/resources/org/mockserver/model/schema/ports.json"
      responses:
        '202':
          description: "listening on additional requested ports, note: the response ony contains ports added for the request, to list all ports use /status"
          schema:
            $ref: "https://raw.githubusercontent.com/jamesdbloom/mockserver/master/mockserver-core/src/main/resources/org/mockserver/model/schema/ports.json"
        '400':
          description: "incorrect request format"
        '406':
          description: "unable to bind to ports (i.e. already bound or JVM process doesn't have permission)"
  /stop:
    put:
      tags:
        - control
      summary: "stop running process"
      description: "only supported on Netty version"
      responses:
        '202':
          description: "MockServer process is stopping"
  /expectation:
    put:
      tags:
        - expectation
      summary: "create expectation"
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: expectation
          required: true
          description: "expectation to create"
          schema:
            $ref: "https://raw.githubusercontent.com/jamesdbloom/mockserver/master/mockserver-core/src/main/resources/org/mockserver/model/schema/expectations.json"
      responses:
        '201':
          description: "expectation created"
        '400':
          description: "incorrect request format"
        '406':
          description: "invalid expectation"
  /clear:
    put:
      tags:
        - expectation
      summary: "clears expectations and recorded requests that match the request matcher"
      consumes:
        - application/json
      parameters:
        - in: body
          name: request_matcher
          required: false
          description: "request used to match expectations and recored requests to clear"
          schema:
            $ref: "https://raw.githubusercontent.com/jamesdbloom/mockserver/master/mockserver-core/src/main/resources/org/mockserver/model/schema/httpRequest.json"
      responses:
        '202':
          description: "expectations and recorded requests cleared"
        '400':
          description: "incorrect request format"
  /reset:
    put:
      tags:
        - expectation
      summary: "clears all expectations and recorded requests"
      responses:
        '202':
          description: "expectations and recorded requests cleared"
  /dumpToLog:
    put:
      tags:
        - expectation
      summary: "write all requests to the request log that match the request matcher"
      consumes:
        - application/json
      parameters:
        - in: body
          name: request_matcher
          required: false
          description: "request used to match which recored requests to write to the request log"
          schema:
            $ref: "https://raw.githubusercontent.com/jamesdbloom/mockserver/master/mockserver-core/src/main/resources/org/mockserver/model/schema/httpRequest.json"
      responses:
        '202':
          description: "recorded requests written to request log"
        '400':
          description: "incorrect request format"
  /verify:
    put:
      tags:
        - expectation
      summary: "verify a request has been received a specific number of times"
      consumes:
        - application/json
      produces:
        - text/plain
      parameters:
        - in: body
          name: request_matcher
          required: true
          description: "request matcher and the number of times to match"
          schema:
            $ref: "https://raw.githubusercontent.com/jamesdbloom/mockserver/master/mockserver-core/src/main/resources/org/mockserver/model/schema/verification.json"
      responses:
        '202':
          description: "matching request has been received specified number of times"
        '400':
          description: "incorrect request format"
        '406':
          description: "request has not been received specified numbers of times"
          schema:
            type: string
            description: "JUnit expected:<...> but was:<...> format"
  /verifySequence:
    put:
      tags:
        - expectation
      summary: "verify a sequence of request has been received in the specific order"
      consumes:
        - application/json
      produces:
        - text/plain
      parameters:
        - in: body
          name: request_matcher
          required: true
          description: "the sequence of requests matchers"
          schema:
            $ref: "https://raw.githubusercontent.com/jamesdbloom/mockserver/master/mockserver-core/src/main/resources/org/mockserver/model/schema/verificationSequence.json"
      responses:
        '202':
          description: "request sequence has been received in specified order"
        '400':
          description: "incorrect request format"
        '406':
          description: "request sequence has not been received in specified order"
          schema:
            type: string
            description: "JUnit expected:<...> but was:<...> format"